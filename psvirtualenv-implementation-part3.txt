# PSVirtualEnv/Public/Install-PSModuleInEnv.ps1
function Install-PSModuleInEnv {
    <#
    .SYNOPSIS
        Installs a PowerShell module into the active virtual environment.
    
    .DESCRIPTION
        Installs a PowerShell module from a repository (default: PSGallery) into the
        currently active virtual environment's module directory. The module will only
        be available when the environment is active.
    
    .PARAMETER Name
        Module name to install. Supports wildcards for searching.
    
    .PARAMETER RequiredVersion
        Specific version to install. If not specified, installs the latest version.
    
    .PARAMETER Repository
        Repository to install from. Defaults to PSGallery.
    
    .PARAMETER Scope
        Always set to CurrentUser for environment isolation. This parameter is ignored.
    
    .PARAMETER Force
        Force installation even if the module already exists.
    
    .PARAMETER AllowPrerelease
        Allow installation of prerelease versions.
    
    .EXAMPLE
        Install-PSModuleInEnv -Name "Pester" -RequiredVersion "5.3.0"
        Installs Pester version 5.3.0 into the active environment.
    
    .EXAMPLE
        Install-PSModuleInEnv -Name "PSScriptAnalyzer" -Force
        Installs the latest version of PSScriptAnalyzer, overwriting if it exists.
    #>
    [CmdletBinding(SupportsShouldProcess)]
    [OutputType([void])]
    param(
        [Parameter(Mandatory, Position = 0)]
        [ValidateNotNullOrEmpty()]
        [string]$Name,
        
        [Parameter()]
        [string]$RequiredVersion,
        
        [Parameter()]
        [string]$Repository = 'PSGallery',
        
        [Parameter()]
        [ValidateSet('CurrentUser', 'AllUsers')]
        [string]$Scope = 'CurrentUser',
        
        [Parameter()]
        [switch]$Force,
        
        [Parameter()]
        [switch]$AllowPrerelease
    )
    
    begin {
        Write-Verbose "Installing module '$Name' into virtual environment"
        
        # Verify environment is active
        if (-not (Test-EnvironmentActive)) {
            throw "No virtual environment is active. Use Activate-PSVirtualEnv to activate an environment first."
        }
    }
    
    process {
        $activeEnv = Get-ActiveEnvironment
        $environment = Get-EnvironmentFromRegistry -Name $activeEnv.Name
        
        if (-not $environment) {
            Write-Error "Active environment configuration not found. The environment may be corrupted."
            return
        }
        
        $modulePath = Join-Path $environment.Path 'Modules'
        
        # Build Install-Module parameters
        $installParams = @{
            Name = $Name
            Repository = $Repository
            Scope = 'CurrentUser'
            Force = $Force.IsPresent
            AllowPrerelease = $AllowPrerelease.IsPresent
            ErrorAction = 'Stop'
        }
        
        if ($RequiredVersion) {
            $installParams['RequiredVersion'] = $RequiredVersion
        }
        
        # Add Path parameter to force installation to environment directory
        $installParams['Path'] = $modulePath
        
        if ($PSCmdlet.ShouldProcess("$Name in environment '$($environment.Name)'", "Install module")) {
            try {
                Write-Information "Installing module '$Name' from repository '$Repository'..." -InformationAction Continue
                
                # Temporarily modify PSModulePath to ensure proper installation
                $originalPath = $env:PSModulePath
                $env:PSModulePath = "$modulePath;$originalPath"
                
                try {
                    # Find the module first to get version info
                    $findParams = @{
                        Name = $Name
                        Repository = $Repository
                        ErrorAction = 'Stop'
                    }
                    
                    if ($RequiredVersion) {
                        $findParams['RequiredVersion'] = $RequiredVersion
                    }
                    
                    if ($AllowPrerelease) {
                        $findParams['AllowPrerelease'] = $true
                    }
                    
                    $moduleToInstall = Find-Module @findParams | Select-Object -First 1
                    
                    if (-not $moduleToInstall) {
                        throw "Module '$Name' not found in repository '$Repository'"
                    }
                    
                    # Save the module to the environment path
                    $saveParams = @{
                        Name = $moduleToInstall.Name
                        Path = $modulePath
                        Repository = $Repository
                        Force = $Force.IsPresent
                        ErrorAction = 'Stop'
                    }
                    
                    if ($RequiredVersion) {
                        $saveParams['RequiredVersion'] = $RequiredVersion
                    } else {
                        $saveParams['RequiredVersion'] = $moduleToInstall.Version.ToString()
                    }
                    
                    if ($AllowPrerelease) {
                        $saveParams['AllowPrerelease'] = $true
                    }
                    
                    Save-Module @saveParams
                    
                    # Update environment configuration
                    $environment.AddModule($moduleToInstall.Name, $moduleToInstall.Version.ToString())
                    Set-EnvironmentConfig -Environment $environment
                    
                    # Log installation
                    $logPath = Join-Path $environment.Path "Logs\modules.log"
                    $logEntry = "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - Installed: $($moduleToInstall.Name) v$($moduleToInstall.Version)"
                    Add-Content -Path $logPath -Value $logEntry -ErrorAction SilentlyContinue
                    
                    Write-Information "Successfully installed module '$($moduleToInstall.Name)' version $($moduleToInstall.Version)" -InformationAction Continue
                    
                } finally {
                    # Restore original PSModulePath
                    $env:PSModulePath = $originalPath
                }
                
            } catch {
                Write-Error "Failed to install module '$Name': $_"
            }
        }
    }
}

# PSVirtualEnv/Public/Uninstall-PSModuleInEnv.ps1
function Uninstall-PSModuleInEnv {
    <#
    .SYNOPSIS
        Uninstalls a module from the active virtual environment.
    
    .DESCRIPTION
        Removes a PowerShell module from the currently active virtual environment.
        This only affects the environment and does not impact system-wide installations.
    
    .PARAMETER Name
        Module name to uninstall.
    
    .PARAMETER RequiredVersion
        Specific version to uninstall. If not specified, all versions are removed.
    
    .PARAMETER Force
        Force uninstallation without confirmation.
    
    .EXAMPLE
        Uninstall-PSModuleInEnv -Name "OldModule"
        Uninstalls all versions of OldModule from the active environment.
    
    .EXAMPLE
        Uninstall-PSModuleInEnv -Name "TestModule" -RequiredVersion "1.0.0" -Force
        Uninstalls version 1.0.0 of TestModule without confirmation.
    #>
    [CmdletBinding(SupportsShouldProcess, ConfirmImpact = 'High')]
    [OutputType([void])]
    param(
        [Parameter(Mandatory, Position = 0)]
        [ValidateNotNullOrEmpty()]
        [string]$Name,
        
        [Parameter()]
        [string]$RequiredVersion,
        
        [Parameter()]
        [switch]$Force
    )
    
    begin {
        Write-Verbose "Uninstalling module '$Name' from virtual environment"
        
        # Verify environment is active
        if (-not (Test-EnvironmentActive)) {
            throw "No virtual environment is active. Use Activate-PSVirtualEnv to activate an environment first."
        }
    }
    
    process {
        $activeEnv = Get-ActiveEnvironment
        $environment = Get-EnvironmentFromRegistry -Name $activeEnv.Name
        
        if (-not $environment) {
            Write-Error "Active environment configuration not found. The environment may be corrupted."
            return
        }
        
        $modulePath = Join-Path $environment.Path 'Modules'
        $moduleDir = Join-Path $modulePath $Name
        
        # Check if module exists
        if (-not (Test-Path $moduleDir)) {
            Write-Error "Module '$Name' is not installed in the active environment."
            return
        }
        
        # Find specific version if requested
        if ($RequiredVersion) {
            $versionDir = Join-Path $moduleDir $RequiredVersion
            if (-not (Test-Path $versionDir)) {
                Write-Error "Module '$Name' version '$RequiredVersion' is not installed in the active environment."
                return
            }
            $pathToRemove = $versionDir
            $removeMessage = "module '$Name' version '$RequiredVersion'"
        } else {
            $pathToRemove = $moduleDir
            $removeMessage = "all versions of module '$Name'"
        }
        
        if ($Force -or $PSCmdlet.ShouldProcess("$removeMessage from environment '$($environment.Name)'", "Uninstall")) {
            try {
                # Remove module directory
                Remove-Item -Path $pathToRemove -Recurse -Force -ErrorAction Stop
                
                # Update environment configuration
                if ($RequiredVersion) {
                    # Remove specific version from config
                    $moduleEntry = $environment.Modules | Where-Object { $_.name -eq $Name -and $_.version -eq $RequiredVersion }
                    if ($moduleEntry) {
                        $environment.Modules.Remove($moduleEntry) | Out-Null
                    }
                } else {
                    # Remove all versions from config
                    $environment.RemoveModule($Name)
                }
                
                Set-EnvironmentConfig -Environment $environment
                
                # Log uninstallation
                $logPath = Join-Path $environment.Path "Logs\modules.log"
                $logEntry = "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - Uninstalled: $Name$(if ($RequiredVersion) { " v$RequiredVersion" })"
                Add-Content -Path $logPath -Value $logEntry -ErrorAction SilentlyContinue
                
                Write-Information "Successfully uninstalled $removeMessage" -InformationAction Continue
                
            } catch {
                Write-Error "Failed to uninstall module '$Name': $_"
            }
        }
    }
}

# PSVirtualEnv/Public/Get-PSModuleInEnv.ps1
function Get-PSModuleInEnv {
    <#
    .SYNOPSIS
        Lists modules installed in the active virtual environment.
    
    .DESCRIPTION
        Shows all PowerShell modules installed in the currently active virtual environment.
        Can filter by module name and show available versions.
    
    .PARAMETER Name
        Filter by module name pattern. Supports wildcards.
    
    .PARAMETER ListAvailable
        Show all available modules in the environment, including different versions.
    
    .EXAMPLE
        Get-PSModuleInEnv
        Lists all modules in the active environment.
    
    .EXAMPLE
        Get-PSModuleInEnv -Name "Pester*"
        Lists all modules starting with "Pester" in the active environment.
    
    .EXAMPLE
        Get-PSModuleInEnv -ListAvailable
        Shows all available module versions in the active environment.
    #>
    [CmdletBinding()]
    [OutputType([PSModuleInfo[]])]
    param(
        [Parameter(Position = 0)]
        [SupportsWildcards()]
        [string]$Name = '*',
        
        [Parameter()]
        [switch]$ListAvailable
    )
    
    begin {
        Write-Verbose "Getting modules in virtual environment"
        
        # Verify environment is active
        if (-not (Test-EnvironmentActive)) {
            Write-Warning "No virtual environment is active. Use Activate-PSVirtualEnv to activate an environment first."
            return
        }
    }
    
    process {
        $activeEnv = Get-ActiveEnvironment
        $environment = Get-EnvironmentFromRegistry -Name $activeEnv.Name
        
        if (-not $environment) {
            Write-Error "Active environment configuration not found. The environment may be corrupted."
            return
        }
        
        $modulePath = Join-Path $environment.Path 'Modules'
        
        if (-not (Test-Path $modulePath)) {
            Write-Warning "Module directory not found in environment. No modules installed."
            return
        }
        
        # Get modules using Get-Module with specific path
        $getModuleParams = @{
            Name = $Name
            ListAvailable = $true
            ErrorAction = 'SilentlyContinue'
        }
        
        # Temporarily modify PSModulePath to only search in environment
        $originalPath = $env:PSModulePath
        $env:PSModulePath = $modulePath
        
        try {
            $modules = Get-Module @getModuleParams
            
            if (-not $ListAvailable) {
                # Group by name and get latest version only
                $modules = $modules | Group-Object Name | ForEach-Object {
                    $_.Group | Sort-Object Version -Descending | Select-Object -First 1
                }
            }
            
            # Add custom property to indicate it's from virtual environment
            $modules | ForEach-Object {
                $_ | Add-Member -NotePropertyName 'VirtualEnvironment' -NotePropertyValue $environment.Name -Force
                $_
            }
            
        } finally {
            # Restore PSModulePath
            $env:PSModulePath = $originalPath
        }
    }
}

# PSVirtualEnv/Public/Update-PSModuleInEnv.ps1
function Update-PSModuleInEnv {
    <#
    .SYNOPSIS
        Updates modules in the active virtual environment.
    
    .DESCRIPTION
        Updates PowerShell modules in the currently active virtual environment to their
        latest versions available in the configured repositories.
    
    .PARAMETER Name
        Specific module to update. If not specified, updates all modules.
    
    .PARAMETER Force
        Force update even if the module is already at the latest version.
    
    .PARAMETER AcceptLicense
        Automatically accept license agreements during update.
    
    .EXAMPLE
        Update-PSModuleInEnv
        Updates all modules in the active environment to their latest versions.
    
    .EXAMPLE
        Update-PSModuleInEnv -Name "Pester" -Force
        Forces an update of the Pester module to the latest version.
    #>
    [CmdletBinding(SupportsShouldProcess)]
    [OutputType([void])]
    param(
        [Parameter(Position = 0)]
        [string]$Name,
        
        [Parameter()]
        [switch]$Force,
        
        [Parameter()]
        [switch]$AcceptLicense
    )
    
    begin {
        Write-Verbose "Updating modules in virtual environment"
        
        # Verify environment is active
        if (-not (Test-EnvironmentActive)) {
            throw "No virtual environment is active. Use Activate-PSVirtualEnv to activate an environment first."
        }
    }
    
    process {
        $activeEnv = Get-ActiveEnvironment
        $environment = Get-EnvironmentFromRegistry -Name $activeEnv.Name
        
        if (-not $environment) {
            Write-Error "Active environment configuration not found. The environment may be corrupted."
            return
        }
        
        $modulePath = Join-Path $environment.Path 'Modules'
        
        # Get modules to update
        if ($Name) {
            $modulesToUpdate = Get-PSModuleInEnv -Name $Name
            if (-not $modulesToUpdate) {
                Write-Error "Module '$Name' is not installed in the active environment."
                return
            }
        } else {
            $modulesToUpdate = Get-PSModuleInEnv
            if (-not $modulesToUpdate) {
                Write-Warning "No modules found in the active environment to update."
                return
            }
        }
        
        $updateCount = 0
        $failCount = 0
        
        foreach ($module in $modulesToUpdate) {
            Write-Information "Checking for updates to '$($module.Name)' (current version: $($module.Version))..." -InformationAction Continue
            
            try {
                # Find latest version
                $latestModule = Find-Module -Name $module.Name -ErrorAction Stop | Select-Object -First 1
                
                if ($latestModule.Version -gt $module.Version -or $Force) {
                    if ($PSCmdlet.ShouldProcess("$($module.Name) from $($module.Version) to $($latestModule.Version)", "Update module")) {
                        # Install new version
                        $installParams = @{
                            Name = $module.Name
                            RequiredVersion = $latestModule.Version.ToString()
                            Force = $true
                        }
                        
                        if ($AcceptLicense) {
                            $installParams['AcceptLicense'] = $true
                        }
                        
                        Install-PSModuleInEnv @installParams
                        
                        # Remove old version
                        $oldVersionPath = Join-Path $modulePath "$($module.Name)\$($module.Version)"
                        if (Test-Path $oldVersionPath) {
                            Remove-Item -Path $oldVersionPath -Recurse -Force -ErrorAction SilentlyContinue
                        }
                        
                        # Update environment configuration
                        $moduleEntry = $environment.Modules | Where-Object { $_.name -eq $module.Name }
                        if ($moduleEntry) {
                            $moduleEntry.version = $latestModule.Version.ToString()
                            $moduleEntry.installed = (Get-Date).ToString('o')
                        }
                        
                        Write-Information "Updated '$($module.Name)' from $($module.Version) to $($latestModule.Version)" -InformationAction Continue
                        $updateCount++
                    }
                } else {
                    Write-Verbose "'$($module.Name)' is already at the latest version ($($module.Version))"
                }
                
            } catch {
                Write-Warning "Failed to update module '$($module.Name)': $_"
                $failCount++
            }
        }
        
        # Save updated configuration
        if ($updateCount -gt 0) {
            Set-EnvironmentConfig -Environment $environment
            
            # Log update summary
            $logPath = Join-Path $environment.Path "Logs\modules.log"
            $logEntry = "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - Update completed: $updateCount module(s) updated, $failCount failed"
            Add-Content -Path $logPath -Value $logEntry -ErrorAction SilentlyContinue
        }
        
        Write-Information "Update completed: $updateCount module(s) updated$(if ($failCount -gt 0) { ", $failCount failed" })" -InformationAction Continue
    }
}